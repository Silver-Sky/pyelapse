# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 0.1.2 or v0.1.2)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  release-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Setup uv
        uses: astral-sh/setup-uv@v5

      - name: Resolve version
        id: set_version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            RAW_REF="${GITHUB_REF##*/}"
          else
            RAW_REF="${{ github.event.inputs.version }}"
          fi
          RAW_REF="${RAW_REF#refs/tags/}"
          RAW_REF="${RAW_REF#v}"
          echo "version=$RAW_REF" >> "$GITHUB_OUTPUT"

      - name: Switch to master branch
        run: |
          git fetch origin master
          git checkout -B master origin/master

      - name: Update version in pyproject.toml
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          uv version ${{ steps.set_version.outputs.version }}
          if git diff --quiet -- pyproject.toml; then
            echo "No version change detected."
          else
            git add pyproject.toml
            git commit -m "Update version in pyproject.toml to ${{ steps.set_version.outputs.version }}"
            git push origin HEAD:master
          fi

      - name: Build release distributions
        run: |
          uv build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: pypi
      # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
      # url: https://pypi.org/p/YOURPROJECT
      #
      # ALTERNATIVE: if your GitHub Release name is the PyPI project version string
      # ALTERNATIVE: exactly, uncomment the following line instead:
      # url: https://pypi.org/project/YOURPROJECT/${{ github.event.release.name }}

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
